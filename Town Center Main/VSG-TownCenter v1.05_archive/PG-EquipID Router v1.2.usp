/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer: Pulse Group
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN
	Route Analog Inputs Values to output value based on last pulsed digital input

	v1.1 expanded to 40 inputs
	v1.2 added feedback & removed override
#HELP_END


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
ANALOG_INPUT equip_id_in;
DIGITAL_INPUT source_off;
DIGITAL_INPUT source_req[50];
ANALOG_INPUT device_id[50];
// STRING_INPUT 
// BUFFER_INPUT 

// DIGITAL_OUTPUT 
ANALOG_OUTPUT equip_id_out;
DIGITAL_OUTPUT source_off_fb;
DIGITAL_OUTPUT source_fb[50];
// STRING_OUTPUT 
INTEGER cur_equip_id;

INTEGER_FUNCTION FindDevice(INTEGER id)
{
	INTEGER i,num;

	num = 0;

	if(id = 0)
		return(0);

	for(i=1 to 50)
	{
		if(id = device_id[i])
		{
			num = i;
			break;
		}
	}
	//TRACE("Found %d at %d",id,num);
	return(num);
}	

FUNCTION UpdateFeedback(INTEGER num)
{
	INTEGER i;
	
	if(num = 0)
		return;

	source_off_fb = 0;
	for(i=1 to 50)
	{
		source_fb[i] = 0;
	}
	if(num = 800)
	{
		source_off_fb = 1;
	}
	else if(num > 0)
	{
		source_fb[num] = 1;
	}
	//TRACE("Updating %d",num);
}

CHANGE equip_id_in
{
	INTEGER num;

	if(equip_id_in = 0)
		return;
	if(equip_id_in = cur_equip_id)
		return;
               
	//trace("ChaneDetected %d",equip_id_in);
	num = FindDevice(equip_id_in);
	UpdateFeedback(num);
	cur_equip_id = equip_id_in;
	equip_id_out = equip_id_in;
}
PUSH source_req
{
	INTEGER i;

	i = getlastmodifiedarrayindex();
	cur_equip_id = 0;
	equip_id_out = 0;
	cur_equip_id = device_id[i];
	equip_id_out = device_id[i];	
	UpdateFeedback(i);
}

PUSH source_off
{
	cur_equip_id = 0;
	equip_id_out = 0;
	cur_equip_id = 800;
	equip_id_out = 800;
	UpdateFeedback(800);
}
